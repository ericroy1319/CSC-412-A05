0 111  */
0 32     "",
0 58     WRONG_NUMBER_OF_ARGUMENTS,
0 121  *  they were read from a file, played from a movie, captured from a live
0 40 {
0 119 } ImageFileType;
0 106     "Invalid crop size",        //  INVALID_CROP_SIZE,
0 2 //  rotate
0 63     INVALID_CROP_X_TYPE,
0 76  */
0 93     //
0 142          */
0 53     //
0 148  *  having separate unsigned char and float pointers
0 26     
0 56     //
0 42     //
0 146 /** This is the data type to store all relevant information about an image.  After
0 99     //
0 131         /** Color image with 4 bytes per pixel
0 153     ImageType type;
0 110  *  to touch this
0 116         kTGA_GRAY,
0 43     //  file-related
0 132          */
0 25     NUM_ROTATIONS   //  automatically 4
0 104     "Invalid crop width",       //  INVALID_CROP_WIDTH_TYPE,
0 102     "Invalid crop y",           //  INVALID_CROP_Y_TYPE,
0 122  *  video stream, or the result of calculations.
0 109 /** This enumerated type is used by the image reading code.  You shouldn't have
0 138          */
0 114         kUnknownType = -1,
0 98     "Rotation specification can only contain letters l or r"    //  INVALID_ROT_STRING,
0 155      *  (only useful for DEEP_GRAY_RASTER and FLOAT_RASTER types)
0 73 /** Going overly cute here:  Error message for each of the errors
0 151     /** Type of image stored
0 94     //  command line argument errors
0 128          */
0 80     //  file-related errors
0 41     NO_ERROR = 0,
0 72 } ImageIOErrorCode;
0 59     NO_DASH_ON_ROT_STRING,
0 7 //
0 78     "",     //  NO_ERROR
0 16 /** Simple enum type to report optional arguments for the program
0 84     "Cannot open write file",   //  CANNOT_OPEN_WRITE_FILE,
0 91     //  Generic errors
0 18 typedef enum RotationVal
0 150 typedef struct ImageStruct {
0 69     //
0 45     FILE_NOT_FOUND,
0 147  *  some thought, I have decided to store the 1D and 2D rasters as void* rather than
0 46     CANNOT_OPEN_READ_FILE,
0 20     NO_ROTATION = 0,
0 139         DEEP_GRAY_RASTER,
0 29  *  rotation value.
0 5 //
0 85     "Wrong file type",          //  WRONG_FILE_TYPE,
0 23     ROTATE_270,
0 136         GRAY_RASTER,
0 38  */
0 65     INVALID_CROP_CORNER,
0 11 //
0 88     "Cannot read file",         //  CANNOT_READ_FILE,
0 79     //
0 61     //
0 57     //  command line argument errors
0 12 #if 0
0 55     MEMORY_ALLOCATION_ERROR,
0 117         kPPM,                   //  24-bit color image
0 107     
0 118         kPGM                    //  8-bit gray-level image
0 92     "Memory allocation error",  //  MEMORY_ALLOCATION_ERROR
0 37 /** An enum type for all the errors that this program specifically handles
0 51     CANNOT_READ_FILE,
0 133         RGBA32_RASTER,
0 123  *  Feel free to edit and add types you need for your project.
0 39 typedef enum ImageIOErrorCode
0 13 #pragma mark -
0 19 {
0 143         FLOAT_RASTER
0 125 typedef enum ImageType
0 75  *  different from that of the enum type
0 10 #include <stdlib.h>
0 30  */
0 113 {
0 21     ROTATE_90,
0 154     /** Maximum value for all fields of the image
0 135          */
0 8 #include <stdio.h>
0 83     "Cannot open read file",    //  CANNOT_OPEN_READ_FILE,
0 152      */
0 48     WRONG_FILE_TYPE,
0 52     END_OF_FILE_ERROR,
0 1 //
0 70     NUM_ERROR_CODES     //  correct value because I don't skip codes
0 6 //  Created by Jean-Yves HERVE on 2020-10-10.
0 126 {
0 35     " [l]"
0 22     ROTATE_180,
0 108 };
0 127         /** No type, for an image that got freed (no more raster)
0 74  *  supported.  This one is tricky because it's easy to get the order
0 14 #pragma mark Custom data types and global variables
0 95     //
0 68     INVALID_CROP_SIZE,
0 9 #include <string.h>
0 34     " [rr]",
0 112 typedef enum ImageFileType
0 100     //
0 49     UNKNOWN_FILE_TYPE,
0 103     "Invalid crop corner",      //  INVALID_CROP_CORNER,
0 129         NO_RASTER,
0 36 };
0 24     //
0 97     "Rotation specification must start with a dash",    //  NO_DASH_ON_ROT_STRING,
0 77 char* ERROR_STR[NUM_ERROR_CODES] = {
0 82     "File not found",           //  FILE_NOT_FOUND,
0 105     "Invalid crop height",      //  INVALID_CROP_HEIGHT_TYPE,
0 120 /** This is the enum type that refers to images loaded in memory, whether
0 81     "File path is null",        //  FILE_PATH NULL
0 50     CANNOT_WRITE_FILE,
0 28 /** An array to store the suffix strings for the output file, for each
0 145 } ImageType;
0 62     //
0 4 //	image
0 130          
0 141          *  stored in a float raster
0 47     CANNOT_OPEN_WRITE_FILE,
0 15 #endif
0 86     "Unknown file type",        //  UNKNOWN_FILE_TYPE
0 115         kTGA_COLOR,             //  24-bit color image
0 17  */
0 134         /** Gray image with 1 byte per pixel
0 140         /** Monochrome image (either gray or one color channel of a color image)
0 96     "Incorrect number of arguments.\nProper usage: rotate -{r|l}+ inputImagePath outFolderPath\n",  //  WRONG_NUMBER_OF_ARGUMENTS
0 31 char* ROT_SUFFIX[NUM_ROTATIONS] = {
0 64     INVALID_CROP_Y_TYPE,
0 44     FILE_PATH_NULL,
0 3 //  Reads an image file (in TGA format), and saves a rotated version of the
0 33     " [r]",
0 67     INVALID_CROP_HEIGHT_TYPE,
0 144             
0 149  */
0 66     INVALID_CROP_WIDTH_TYPE,
0 90     //
0 87     "Cannot write file",        //  CANNOT_WRITE_FILE,
0 27 } RotationVal;
0 137         /** Gray image with 2 bytes per pixel
0 54     //  Generic errors
0 71     
0 60     INVALID_ROT_STRING,
0 101     "Invalid crop x",           //  INVALID_CROP_X_TYPE,
0 89     "End of file error",        //  END_OF_FILE_ERROR,
0 124  */
