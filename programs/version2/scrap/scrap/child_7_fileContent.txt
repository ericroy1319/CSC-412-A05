7 1093     if (img->type == RGBA32_RASTER)
7 1231     //  the rest of the info is read from the file stream
7 1180     {
7 1173     // --- find if we have a known picture format ---
7 1213     {
7 1115     }
7 1142         
7 1164 }
7 1131                 fclose(fp);
7 1111                     return CANNOT_WRITE_FILE;
7 1242 }
7 1156     else
7 1178     if ((imgType[0] != 'P') || ((imgType[1] != '2') && (imgType[1] != '5') &&
7 1227     }
7 1216         {
7 1229     sscanf(buf,"%d", nbCols);
7 1160     }
7 1230     
7 1205     //  read until we encounter a non-whitespace character.  This could be a comment
7 1220             fscanf(inPPM, "%[\n\r\t ]", skip);
7 1096         fprintf(fp, "%d %d\n", img->width, img->height);
7 1190             break;
7 1228     //  but should contain only one thing: the width of the image
7 1226             commentsSkipped = 1;
7 1199     //  Note: I am doing some really ugly stuff with file input and buffers.
7 1118         fprintf(fp, "P5\n");
7 1210         commentsSkipped = 1;
7 1183     }
7 1176     imgType[1] = buf[1];
7 1217             //  ...skip the rest of the line
7 1122         
7 1116     else if (img->type == GRAY_RASTER)
7 1168                            unsigned int* maxVal)
7 1095         fprintf(fp, "P6\n");
7 1214         //  if we stepped into  some comment...
7 1197     }
7 1170     char    buf[80], skip[80], imgType[2], c;
7 1166                            ImageFileType* fileType,
7 1129                 fprintf(stderr, "Error in writePPM: couldn't write to file %s\n",
7 1238     if (imgType[1] == '2' || imgType[1] == '3')
7 1232     fscanf(inPPM,"%d", nbRows);
7 1141         unsigned short** raster2D = (unsigned short**) img->raster2D;
7 1127             if (ierr != 1)
7 1192         case '6':
7 1147             if (ierr != img->width)
7 1130                                  filePath);
7 1172     
7 1219             //  skip additional whitespace on the next line
7 1187         case '2':
7 1196             break;
7 1106                 if (ierr != 3)
7 1155     }
7 1099         
7 1175     imgType[0] = buf[0];
7 1221             
7 1186     {
7 1152                 return CANNOT_WRITE_FILE;
7 1150                                  filePath);
7 1207     fscanf(inPPM, "%[^\n\r\t ]", buf);
7 1117     {
7 1195         default:
7 1136     else if (img->type == DEEP_GRAY_RASTER)
7 1189             *fileType = kPGM;
7 1188         case '5':
7 1203     //  skip whitespace
7 1233     fscanf(inPPM,"%d", maxVal);
7 1201     //  on the Mac are screwed up (they might be, for all I know), or just
7 1114         }
7 1100         for (unsigned int i=img->height-1, mirrorI=0; mirrorI<img->height; i--, mirrorI++)
7 1146             
7 1198     
7 1094     {
7 1107                 {
7 1113             }
7 1120         fprintf(fp, "255\n");
7 1239         return 1;
7 1209     if (buf[0] != '#')
7 1191         case '3':
7 1222             //  then read until the next whitespace
7 1121         unsigned char** raster2D = (unsigned char**) img->raster2D;
7 1144         {
7 1177     
7 1119         fprintf(fp, "%d %d\n", img->width, img->height);
7 1135     }
7 1224         }
7 1137     {
7 1167                            unsigned int* nbRows, unsigned int* nbCols,
7 1157     {
7 1105                 
7 1185     switch (imgType[1])
7 1140         fprintf(fp, "%d\n", img->maxVal);
7 1132                 return CANNOT_WRITE_FILE;
7 1241         return 0;
7 1112                 }
7 1171     int     commentsSkipped = 0;
7 1108                     fprintf(stderr, "Error in writePPM: couldn't write to file %s\n",
7 1202     //  because I kept missing something important somewhere.
7 1204     fscanf(inPPM, "%[\n\r\t ]", skip);
7 1148             {
7 1182         exit(WRONG_FILE_TYPE);
7 1208     
7 1123         for (unsigned int i=img->height-1, mirrorI=0; mirrorI<img->height; i--, mirrorI++)
7 1211     
7 1103             {
7 1151                 fclose(fp);
7 1154         }
7 1101         {
7 1158         printf("A float raster image cannon be saved in PPM/PGM format\n");
7 1125             size_t ierr = fwrite(raster2D[i], 1, img->width, fp);
7 1092     }
7 1193             *fileType = kPPM;
7 1215         if (buf[0] == '#')
7 1235     //  Read the extra space
7 1102             for (unsigned int j=0; j<img->width; j++)
7 1098         int** raster2D = (int**) img->raster2D;
7 1223             fscanf(inPPM, "%[^\n\r\t ]", buf);
7 1161     
7 1110                     fclose(fp);
7 1134         }
7 1126                 
7 1162     fclose(fp);
7 1133             }
7 1200     //  I am not sure if I had to do that because ANSI file I/O libraries
7 1159         return WRONG_FILE_TYPE;
7 1179                                 (imgType[1] != '3') && (imgType[1] != '6')))
7 1206     //  or the nb of columns
7 1174     fscanf(inPPM, "%s", buf);
7 1128             {
7 1124         {
7 1097         fprintf(fp, "255\n");
7 1145             size_t ierr = fwrite(raster2D[i], 2, img->width, fp);
7 1184     //  Get the images type
7 1163     return NO_ERROR;
7 1181         printf("%s is not a file in the PPM format.\n", filePath);
7 1149                 fprintf(stderr, "Error in writePPM: couldn't write to file %s\n",
7 1236     fscanf(inPPM, "%c", &c);
7 1225         else
7 1234     
7 1109                                      filePath);
7 1139         fprintf(fp, "%d %d\n", img->width, img->height);
7 1212     while (!commentsSkipped)
7 1138         fprintf(fp, "P5\n");
7 1165 char getHeaderInfoPPM_PGM_(FILE* inPPM, char* filePath,
7 1218             fscanf(inPPM, "%[^\n\r]", skip);
7 1237     
7 1169 {
7 1104                 size_t ierr = fwrite(raster2D[i]+j, 1, 3, fp);
7 1240     else
7 1194             break;
7 1153             }
7 1143         for (unsigned int i=img->height-1, mirrorI=0; mirrorI<img->height; i--, mirrorI++)
